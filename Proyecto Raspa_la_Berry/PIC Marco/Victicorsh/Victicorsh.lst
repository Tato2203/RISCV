CCS PCM C Compiler, Version 5.059, 5967               09-ago.-18 08:02

               Filename:   C:\Users\¡¡¡VIVA EL BASKET!!!\Desktop\Progra\PIC\Victicorsh\Victicorsh.lst

               ROM used:   144 words (2%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           8 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
.................... #include<16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #use delay(clock=4M) 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... #fuses NOWDT, NOLVP, XT 
....................  
.................... int x=0; 
....................  
.................... void main(){ 
0019:  MOVF   03,W
001A:  ANDLW  1F
001B:  MOVWF  03
001C:  CLRF   20
001D:  BSF    03.5
001E:  BSF    1F.0
001F:  BSF    1F.1
0020:  BSF    1F.2
0021:  BCF    1F.3
0022:  MOVLW  07
0023:  MOVWF  1C
0024:  BCF    03.7
....................    while(true){ 
....................       if(input(pin_A0)==TRUE && x==0){ 
0025:  BSF    05.0
0026:  BCF    03.5
0027:  BTFSS  05.0
0028:  GOTO   03A
0029:  MOVF   20,F
002A:  BTFSS  03.2
002B:  GOTO   03A
....................          output_high(pin_B0); 
002C:  BSF    03.5
002D:  BCF    06.0
002E:  BCF    03.5
002F:  BSF    06.0
....................          output_high(pin_B1); 
0030:  BSF    03.5
0031:  BCF    06.1
0032:  BCF    03.5
0033:  BSF    06.1
....................          output_high(pin_B2); 
0034:  BSF    03.5
0035:  BCF    06.2
0036:  BCF    03.5
0037:  BSF    06.2
....................          x=x+1; 
0038:  MOVLW  01
0039:  ADDWF  20,F
....................       } 
....................       if(input(pin_A0)==TRUE && x==1){ 
003A:  BSF    03.5
003B:  BSF    05.0
003C:  BCF    03.5
003D:  BTFSS  05.0
003E:  GOTO   07C
003F:  DECFSZ 20,W
0040:  GOTO   07C
....................          while(x==1){ 
0041:  DECFSZ 20,W
0042:  GOTO   07C
....................             output_high(pin_B0); 
0043:  BSF    03.5
0044:  BCF    06.0
0045:  BCF    03.5
0046:  BSF    06.0
....................             output_high(pin_B1); 
0047:  BSF    03.5
0048:  BCF    06.1
0049:  BCF    03.5
004A:  BSF    06.1
....................             output_high(pin_B2); 
004B:  BSF    03.5
004C:  BCF    06.2
004D:  BCF    03.5
004E:  BSF    06.2
....................             delay_ms(500); 
004F:  MOVLW  02
0050:  MOVWF  21
0051:  MOVLW  FA
0052:  MOVWF  22
0053:  CALL   004
0054:  DECFSZ 21,F
0055:  GOTO   051
....................             output_low(pin_B0); 
0056:  BSF    03.5
0057:  BCF    06.0
0058:  BCF    03.5
0059:  BCF    06.0
....................             output_low(pin_B1); 
005A:  BSF    03.5
005B:  BCF    06.1
005C:  BCF    03.5
005D:  BCF    06.1
....................             output_low(pin_B2); 
005E:  BSF    03.5
005F:  BCF    06.2
0060:  BCF    03.5
0061:  BCF    06.2
....................             delay_ms(500); 
0062:  MOVLW  02
0063:  MOVWF  21
0064:  MOVLW  FA
0065:  MOVWF  22
0066:  CALL   004
0067:  DECFSZ 21,F
0068:  GOTO   064
....................             if(input(pin_A0)==TRUE){ 
0069:  BSF    03.5
006A:  BSF    05.0
006B:  BCF    03.5
006C:  BTFSS  05.0
006D:  GOTO   07B
....................                output_low(pin_B0); 
006E:  BSF    03.5
006F:  BCF    06.0
0070:  BCF    03.5
0071:  BCF    06.0
....................                output_low(pin_B1); 
0072:  BSF    03.5
0073:  BCF    06.1
0074:  BCF    03.5
0075:  BCF    06.1
....................                output_low(pin_B2); 
0076:  BSF    03.5
0077:  BCF    06.2
0078:  BCF    03.5
0079:  BCF    06.2
....................                BREAK;    
007A:  GOTO   07C
....................             } 
007B:  GOTO   041
....................          } 
....................       } 
....................       if(input(pin_A1)==TRUE){ 
007C:  BSF    03.5
007D:  BSF    05.1
007E:  BCF    03.5
007F:  BTFSS  05.1
0080:  GOTO   08D
....................          output_low(pin_B0); 
0081:  BSF    03.5
0082:  BCF    06.0
0083:  BCF    03.5
0084:  BCF    06.0
....................          output_high(pin_B1); 
0085:  BSF    03.5
0086:  BCF    06.1
0087:  BCF    03.5
0088:  BSF    06.1
....................          output_low(pin_B2); 
0089:  BSF    03.5
008A:  BCF    06.2
008B:  BCF    03.5
008C:  BCF    06.2
....................       } 
008D:  BSF    03.5
008E:  GOTO   025
....................    } 
.................... } 
008F:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
